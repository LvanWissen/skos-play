package fr.sparna.rdf.skos.printer.reader;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;

import org.eclipse.rdf4j.model.Literal;
import org.eclipse.rdf4j.model.impl.SimpleValueFactory;
import org.eclipse.rdf4j.query.TupleQueryResultHandlerException;
import org.eclipse.rdf4j.repository.Repository;
import org.eclipse.rdf4j.repository.RepositoryConnection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import fr.sparna.rdf.rdf4j.toolkit.query.Perform;
import fr.sparna.rdf.rdf4j.toolkit.repository.RepositoryBuilderFactory;
import fr.sparna.rdf.skos.printer.DisplayPrinter;
import fr.sparna.rdf.skos.printer.schema.KosDocument;
import fr.sparna.rdf.skos.printer.schema.KosDocumentHeader;
import fr.sparna.rdf.skos.toolkit.GetLanguagesHelper;

public class CompleteDisplayGeneratorTest {
	
	private static Logger log = LoggerFactory.getLogger(CompleteDisplayGeneratorTest.class);
	
	public static void main(String... args) throws Exception {			
		((ch.qos.logback.classic.Logger) LoggerFactory.getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME)).setLevel(ch.qos.logback.classic.Level.INFO);
	    ((ch.qos.logback.classic.Logger) org.slf4j.LoggerFactory.getLogger("fr.sparna.rdf")).setLevel(ch.qos.logback.classic.Level.TRACE);
		
		// final String LANG = "fr-fr";
	    final String LANG = "ar";
		
		Repository r = RepositoryBuilderFactory.fromString(args[0]).get();
		try(RepositoryConnection connection = r.getConnection()) {
		
			// build result document
			KosDocument document = new KosDocument();
			if(LANG.startsWith("ar")) {
				log.info("Setting writing mode on the KosDocument");
				document.setWritingMode("rl-tb");
			}
			
			// build and set header
			HeaderAndFooterReader headerReader = new HeaderAndFooterReader(connection);
			headerReader.setApplicationString("Generated by SKOS Play!, sparna.fr");
			KosDocumentHeader header = headerReader.readHeader(LANG, (args.length > 1)?SimpleValueFactory.getInstance().createIRI(args[1]):null);
			document.setHeader(header);
			document.setFooter(headerReader.readFooter(LANG, (args.length > 1)?SimpleValueFactory.getInstance().createIRI(args[1]):null));
			
			// prepare a list of generators
			List<AbstractKosDisplayGenerator> generators = new ArrayList<AbstractKosDisplayGenerator>();
			
			// read all potential languages and exclude the main one
			final List<String> additionalLangs = new ArrayList<String>();
			
			// Uncomment this for multilingual display
			/*
			Perform.on(connection).select(new GetLanguagesHelper() {			
				@Override
				protected void handleLang(Literal lang) throws TupleQueryResultHandlerException {
					if(!lang.stringValue().equals(LANG) && !lang.stringValue().equals("")) {
						additionalLangs.add(lang.stringValue());
					}
				}
			});
			*/
				
			// alphabetical display
			ConceptBlockReader alphaCbReader = new ConceptBlockReader();
			alphaCbReader.setSkosPropertiesToRead(AlphaIndexDisplayGenerator.EXPANDED_SKOS_PROPERTIES_WITH_TOP_TERMS);
			alphaCbReader.setAdditionalLabelLanguagesToInclude(additionalLangs);
			alphaCbReader.setLinkDestinationIdPrefix("hier");
			AlphaIndexDisplayGenerator alphaGen = new AlphaIndexDisplayGenerator(
					connection,
					alphaCbReader,
					"alpha"
			);
			generators.add(alphaGen);
			
			// hierarchical display
			ConceptBlockReader hierCbReader = new ConceptBlockReader();
			hierCbReader.setLinkDestinationIdPrefix("alpha");
			HierarchicalDisplayGenerator hierarchyGen = new HierarchicalDisplayGenerator(
					connection,
					hierCbReader,
					"hier"
			);
			generators.add(hierarchyGen);
			
			// add translation tables for each additional languages
			for (int i=0;i<additionalLangs.size(); i++) {			
				String anAdditionalLang = additionalLangs.get(i);
				log.debug("Generates additionnal language : "+anAdditionalLang);
				ConceptBlockReader aCbReader = new ConceptBlockReader();
				aCbReader.setLinkDestinationIdPrefix("alpha");
				TranslationTableReverseDisplayGenerator ttGen = new TranslationTableReverseDisplayGenerator(
						connection,
						aCbReader,
						anAdditionalLang,
						"trans"+i);
				generators.add(ttGen);
			}
			
			// add alignement reader
			ConceptBlockReader alignCbReader = new ConceptBlockReader();
			alignCbReader.setLinkDestinationIdPrefix("alpha");
			AlignmentDisplayGenerator alignmentGen = new AlignmentDisplayGenerator(
					connection,
					alignCbReader,
					"alignId",
					new AlignmentDataHarvesterCachedLoader("/home/thomas/temp/alignCache")
			);
			alignmentGen.setSeparateByTargetScheme(false);
			generators.add(alignmentGen);
			
			BodyReader bodyReader = new BodyReader(generators);
			document.setBody(bodyReader.readBody(LANG, (args.length > 1)?SimpleValueFactory.getInstance().createIRI(args[1]):null));
			
			Marshaller m = JAXBContext.newInstance("fr.sparna.rdf.skos.printer.schema").createMarshaller();
			m.setProperty("jaxb.formatted.output", true);
			// m.marshal(display, System.out);
			m.marshal(document, new File("display-test.xml"));
			
			DisplayPrinter printer = new DisplayPrinter();
			printer.setStyle(DisplayPrinter.Style.UNESCO);
			// to debug FOP output
			printer.setDebug(true);
			printer.setDebugPath(".");
			printer.printToHtml(document, new File("display-test.html"), LANG);
			printer.printToPdf(document, new File("display-test.pdf"), LANG);
		} // end try(connection)

	}

}
